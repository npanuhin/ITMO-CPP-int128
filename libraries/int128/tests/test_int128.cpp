#include <catch2/catch_test_macros.hpp>
#include <iomanip>
#include <map>

#include "int128/Int128.hpp"

namespace {

// int64_t SMALL_64_NUMBER = 369;
// int64_t LARGE_64_NUMBER = (uint64_t(1) << 14) + (uint64_t(1) << 34) + (uint64_t(1) << 48);
// int64_t VERY_LARGE_64_NUMBER = INT64_MAX;
// int64_t VERY_LARGE_NEGATIVE_64_NUMBER = INT64_MIN;

std::string NUM1 = "-42331917115048286369321807834015434053";
std::string NUM2 = "-29256914613596052498173063890724085253";
std::string NUM3 = "109049884421922508591792876277019054036";
std::string NUM4 = "-137230788039330516817402106788765031062";
std::string NUM5 = "12730643003264005858585894694590097558";

std::string NUM1_BIN =
    "1110000000100111001010110101100010110111110101100101110011000100"
    "1011010010100000001010101110100000111001101011100111101010111011";
std::string NUM2_BIN =
    "1110100111111101010100101011110110101001110000011111110110000101"
    "0000011101100000110010010110011100111000111010011010000111111011";
std::string NUM3_BIN =
    "0101001000001010001111100110100010100001000100101011101100011100"
    "0100100110100111001000011100100110000001111010100000111111010100";
std::string NUM4_BIN =
    "1001100011000010010011111100010100101011011010111110000100100000"
    "0100001101001110001001001010000110111011001111110010010101101010";
std::string NUM5_BIN =
    "0000100110010011110101010010100100000100100000011101011000010101"
    "0101101110000101101101111000001010111001000111000010100010010110";

std::map<std::string, std::string> NUMBERS = {
    {NUM1, NUM1_BIN}, {NUM2, NUM2_BIN}, {NUM3, NUM3_BIN}, {NUM4, NUM4_BIN}, {NUM5, NUM5_BIN}};

std::string NUM1_PLUS_NUM2 = "-71588831728644338867494871724739519306";
std::string NUM1_PLUS_NUM3 = "66717967306874222222471068443003619983";
std::string NUM1_PLUS_NUM4 = "160719661766559660276650692808987746341";
std::string NUM1_PLUS_NUM5 = "-29601274111784280510735913139425336495";

std::string NUM1_PLUS_NUM2_BIN =
    "1100101000100100011111100001011001100001100110000101101001001001"
    "1011110000000000111101000100111101110010100110000001110010110110";
std::string NUM1_PLUS_NUM3_BIN =
    "0011001000110001011010011100000101011000111010010001011111100000"
    "1111111001000111010011001011000110111011100110001000101010001111";
std::string NUM1_PLUS_NUM4_BIN =
    "0111100011101001011110110001110111100011010000100011110111100100"
    "1111011111101110010011111000100111110100111011011010000000100101";
std::string NUM1_PLUS_NUM5_BIN =
    "1110100110111011000000001000000110111100010110000011001011011010"
    "0001000000100101111000100110101011110010110010101010001101010001";

std::string NUM1_MUL_NUM2_BIN =
    "0111010100011111010111010111100011000101110001101010101101001001"
    "0000010010110000111111001101101011100101011101001111000001011001";
std::string NUM1_MUL_NUM3_BIN =
    "0000100000101101000111000101010101100011111000100011000010001011"
    "0101111101001010010000001101100001100111100111001001011111011100";
std::string NUM1_MUL_NUM4_BIN =
    "0000010000000001100101110010000111011011111110001101111000100001"
    "0100011111000101011101011010111111100111000000001101100001101110";
std::string NUM1_MUL_NUM5_BIN =
    "0111000000110111011101011011100011101011011100001100001111000111"
    "1010000000011111110100101101000110011110110111010010000110010010";

}  // anonymous namespace

std::map<char, char> BIN_REVERT = {{'0', '1'}, {'1', '0'}};

TEST_CASE("Bit shift left", "[bit shift left]") {
    for (int i = 0; i < 128; ++i) {
        std::string expected = std::string(127 - i, '0') + std::string(1, '1') + std::string(i, '0');
        REQUIRE((Int128(1) << i).bit_string() == expected);
    }
}

TEST_CASE("Bit shift right", "[bit shift right]") {
    for (int i = 0; i < 128; ++i) {
        std::string expected = std::string(i, '0') + std::string(1, '1') + std::string(127 - i, '0');
        REQUIRE(((Int128(1) << 127) >> i).bit_string() == expected);
    }
}

TEST_CASE("From string_view", "[string_view]") {
    for (auto& [decimal1, binary] : NUMBERS) {
        REQUIRE(Int128(decimal1).bit_string() == binary);
    }
}

// TEST_CASE("To str()", "[str]") {
//     for (auto & [decimal1, binary] : NUMBERS) {
//         REQUIRE(Int128(decimal1).str() == decimal1);
//     }
// }

TEST_CASE("Unary minus", "[minus]") {
    for (auto& [decimal1, binary] : NUMBERS) {
        std::string expected;
        for (auto c : binary) {
            expected += BIN_REVERT[c];
        }
        REQUIRE((-Int128(decimal1) - Int128(1)).bit_string() == expected);
    }
}

TEST_CASE("Addition", "[addition]") {
    REQUIRE((Int128(NUM1) + Int128(NUM2)).bit_string() == NUM1_PLUS_NUM2_BIN);
    REQUIRE((Int128(NUM2) + Int128(NUM1)).bit_string() == NUM1_PLUS_NUM2_BIN);

    REQUIRE((Int128(NUM1) + Int128(NUM3)).bit_string() == NUM1_PLUS_NUM3_BIN);
    REQUIRE((Int128(NUM3) + Int128(NUM1)).bit_string() == NUM1_PLUS_NUM3_BIN);

    REQUIRE((Int128(NUM1) + Int128(NUM4)).bit_string() == NUM1_PLUS_NUM4_BIN);
    REQUIRE((Int128(NUM4) + Int128(NUM1)).bit_string() == NUM1_PLUS_NUM4_BIN);

    REQUIRE((Int128(NUM1) + Int128(NUM5)).bit_string() == NUM1_PLUS_NUM5_BIN);
    REQUIRE((Int128(NUM5) + Int128(NUM1)).bit_string() == NUM1_PLUS_NUM5_BIN);
}

TEST_CASE("Subtraction", "[subtraction]") {
    REQUIRE((Int128(NUM1_PLUS_NUM2) - Int128(NUM1)).bit_string() == NUM2_BIN);
    REQUIRE((Int128(NUM1_PLUS_NUM2) - Int128(NUM2)).bit_string() == NUM1_BIN);

    REQUIRE((Int128(NUM1_PLUS_NUM3) - Int128(NUM1)).bit_string() == NUM3_BIN);
    REQUIRE((Int128(NUM1_PLUS_NUM3) - Int128(NUM3)).bit_string() == NUM1_BIN);

    REQUIRE((Int128(NUM1_PLUS_NUM4) - Int128(NUM1)).bit_string() == NUM4_BIN);
    REQUIRE((Int128(NUM1_PLUS_NUM4) - Int128(NUM4)).bit_string() == NUM1_BIN);

    REQUIRE((Int128(NUM1_PLUS_NUM5) - Int128(NUM1)).bit_string() == NUM5_BIN);
    REQUIRE((Int128(NUM1_PLUS_NUM5) - Int128(NUM5)).bit_string() == NUM1_BIN);
}

TEST_CASE("Multiplication", "[multiplication]") {
    REQUIRE((Int128(NUM1) * Int128(NUM2)).bit_string() == NUM1_MUL_NUM2_BIN);
    REQUIRE((Int128(NUM2) * Int128(NUM1)).bit_string() == NUM1_MUL_NUM2_BIN);

    REQUIRE((Int128(NUM1) * Int128(NUM3)).bit_string() == NUM1_MUL_NUM3_BIN);
    REQUIRE((Int128(NUM3) * Int128(NUM1)).bit_string() == NUM1_MUL_NUM3_BIN);

    REQUIRE((Int128(NUM1) * Int128(NUM4)).bit_string() == NUM1_MUL_NUM4_BIN);
    REQUIRE((Int128(NUM4) * Int128(NUM1)).bit_string() == NUM1_MUL_NUM4_BIN);

    REQUIRE((Int128(NUM1) * Int128(NUM5)).bit_string() == NUM1_MUL_NUM5_BIN);
    REQUIRE((Int128(NUM5) * Int128(NUM1)).bit_string() == NUM1_MUL_NUM5_BIN);
}

TEST_CASE("Comparison", "[comparison]") {
    // ==
    REQUIRE(Int128(NUM1) == Int128(NUM1));
    REQUIRE(Int128(NUM2) == Int128(NUM2));
    REQUIRE(Int128(NUM3) == Int128(NUM3));
    REQUIRE(Int128(NUM4) == Int128(NUM4));
    REQUIRE(Int128(NUM5) == Int128(NUM5));

    // !=
    for (auto& [decimal1, binary1] : NUMBERS) {
        for (auto& [decimal2, binary2] : NUMBERS) {
            if (decimal1 != decimal2) {
                REQUIRE(Int128(decimal1) != Int128(decimal2));
            }
        }
    }

    // <
    REQUIRE(Int128(NUM4) < Int128(NUM1));
    REQUIRE(Int128(NUM1) < Int128(NUM2));
    REQUIRE(Int128(NUM2) < Int128(NUM5));
    REQUIRE(Int128(NUM5) < Int128(NUM3));

    // <=
    REQUIRE(Int128(NUM1) <= Int128(NUM1));
    REQUIRE(Int128(NUM2) <= Int128(NUM2));
    REQUIRE(Int128(NUM3) <= Int128(NUM3));
    REQUIRE(Int128(NUM4) <= Int128(NUM4));
    REQUIRE(Int128(NUM5) <= Int128(NUM5));

    REQUIRE(Int128(NUM4) <= Int128(NUM1));
    REQUIRE(Int128(NUM1) <= Int128(NUM2));
    REQUIRE(Int128(NUM2) <= Int128(NUM5));
    REQUIRE(Int128(NUM5) <= Int128(NUM3));

    // >
    REQUIRE(Int128(NUM3) > Int128(NUM5));
    REQUIRE(Int128(NUM5) > Int128(NUM2));
    REQUIRE(Int128(NUM2) > Int128(NUM1));
    REQUIRE(Int128(NUM1) > Int128(NUM4));

    // >=
    REQUIRE(Int128(NUM1) >= Int128(NUM1));
    REQUIRE(Int128(NUM2) >= Int128(NUM2));
    REQUIRE(Int128(NUM3) >= Int128(NUM3));
    REQUIRE(Int128(NUM4) >= Int128(NUM4));
    REQUIRE(Int128(NUM5) >= Int128(NUM5));

    REQUIRE(Int128(NUM3) >= Int128(NUM5));
    REQUIRE(Int128(NUM5) >= Int128(NUM2));
    REQUIRE(Int128(NUM2) >= Int128(NUM1));
    REQUIRE(Int128(NUM1) >= Int128(NUM4));
}

TEST_CASE("Cast to double", "[double]") {
    // INFO(std::setprecision(100) << static_cast<double>(Int128(NUM1)));
    REQUIRE(static_cast<double>(Int128(NUM1)) == 13015450099989248000);
    REQUIRE((double)(Int128(NUM1)) == 13015450099989248000);
}
